service: sls-image-s3
frameworkVersion: "3"
plugins:
  - serverless-webpack
provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps --stack-trace-limit=1000
    BUCKET_NAME: ${self:custom.bucketName}
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - cognito-idp:*
        - dynamodb:*
      Resource: "*"

functions:
  preSignup:
    handler: src/functions/preSignup/handler.main
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true

  signup:
    handler: src/functions/signup/handler.main
    events:
      - http:
          path: /signup
          method: post
          cors: true

  login:
    handler: src/functions/login/handler.main
    events:
      - http:
          path: /login
          method: post
          cors: true

  getPresignedUrl:
    handler: src/functions/getPresignedUrl/handler.main
    events:
      - http:
          path: /getPresignedUrl
          method: get
          cors: true
          authorizer:
            name: image-upload-authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  deleteImage:
    handler: src/functions/deleteImage/handler.main
    events:
      - http:
          path: /deleteImage/{key}
          method: delete
          cors: true
          authorizer:
            name: image-upload-authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getImages:
    handler: src/functions/getImages/handler.main
    events:
      - http:
          path: /getImages
          method: get
          cors: true
          authorizer:
            name: image-upload-authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  updateDb:
    handler: src/functions/updateDb/handler.main
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:Post
          existing: true
    
# package:
#   individually: true
custom:
  bucketName: upload-image-to-s3-bucket
  tableName: users-files
  userPoolName: upload-image-to-s3-pool
  webpack:
    webpackConfig: webpack.config.ts
    includeModules: true
    packager: npm

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ['email']
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: upload-image-to-s3-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "USER_PASSWORD_AUTH"
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
